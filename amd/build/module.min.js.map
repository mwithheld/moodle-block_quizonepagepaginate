{"version":3,"file":"module.min.js","sources":["../src/module.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * JS for this plugin.\n *\n * @copyright   IntegrityAdvocate.com\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n/* global window, M */\n/* eslint-env es6, node */\n/* eslint-disable no-control-regex, no-alert */\n\nclass block_quizonepagepaginate {\n    constructor(questionsperpage) {\n        let debug = false;\n        let self = this;\n        const FXN = self.constructor.name + '.constructor';\n        if (debug) { window.console.log(FXN + '::Started'); }\n\n        // How many quiz questions to show at one time.\n        self.questionsperpage = questionsperpage;\n\n        // The index of the first quiz question to show.\n        self.firstQuestionToShow = 0;\n\n        // Used to locate the quiz questions on the page.\n        self.eltQuestionsSelector = '#page-mod-quiz-attempt #responseform .que';\n        // Used to place this plugin's JS-driven next/prev nav buttons.\n        self.eltQuizFinishAttemptButtonSelector = '#responseform .submitbtns .mod_quiz-next-nav';\n\n        // Holds all the current page quiz questions, visible or not.\n        self.arrQuestions = [];\n    }\n\n    run() {\n        let debug = false;\n        let self = this;\n        const FXN = self.constructor.name + '.run';\n        if (debug) {\n            window.console.log(FXN + '::Started with self.firstQuestionToShow=; self.questionsperpage=',\n                self.firstQuestionToShow, self.questionsperpage);\n        }\n\n        self.getAllQuestions();\n        self.hideShowQuestions(self.firstQuestionToShow, self.questionsperpage);\n        self.addNextPrevButtons();\n    }\n\n    getAllQuestions() {\n        let debug = false;\n        let self = this;\n        const FXN = self.constructor.name + '.getAllQuestions';\n        if (debug) { window.console.log(FXN + '::Started'); }\n\n        self.arrQuestions = document.querySelectorAll(self.eltQuestionsSelector);\n        if (debug) { window.console.log(FXN + '::Found ' + self.arrQuestions.length + ' questions on the page'); }\n    }\n\n    hideShowQuestions(first = 0, length) {\n        let debug = true;\n        let self = this;\n        const FXN = self.constructor.name + '.hideShowQuestions';\n        if (debug) { window.console.log(FXN + '::Started with start=; length=', first, length); }\n\n        const last = first + length;\n\n        self.arrQuestions.forEach(function(elt, index) {\n            window.console.log(FXN + '::Looking at index=; elt=', index, elt);\n            if (index >= first && index < last) {\n                if (debug) { window.console.log(FXN + '::Show this elt'); }\n                self.setDisplayVal(elt, 'block');\n            } else {\n                if (debug) { window.console.log(FXN + '::Hide this elt'); }\n                self.setDisplayVal(elt, 'none');\n            }\n        });\n    }\n\n    setDisplayVal(elt, displayVal) {\n        if (elt.style.display !== displayVal) {\n            elt.style.display = displayVal;\n        }\n    }\n\n    addNextPrevButtons() {\n        let debug = true;\n        let self = this;\n        const FXN = self.constructor.name + '.addNextPrevButtons';\n        if (debug) {\n            window.console.log(FXN + '::Started with self.eltQuizFinishAttemptButtonSelector=',\n                self.eltQuizFinishAttemptButtonSelector);\n        }\n\n        let eltCloneSource = document.querySelector(self.eltQuizFinishAttemptButtonSelector);\n\n        // String are returned in a plain array in the same order specified here.\n        // E.g. [0 => \"Previous\", 1 => \"Next\"].\n        const stringsToRetrieve = [{\n                key: 'previous',\n                component: 'core'\n            },\n            {\n                key: 'next',\n                component: 'core',\n            }\n        ];\n\n        // We need core/str bc we get column names via ajax get_string later.\n        require(['core/str'], function(str) {\n            if (debug) { window.console.log(FXN + '.require::Started with stringsToRetrieve=', stringsToRetrieve); }\n\n            str.get_strings(stringsToRetrieve).then(\n                function(stringsRetrieved) {\n                    if (debug) {\n                        window.console.log(FXN + '.require.get_strings.then::Started with stringsRetrieved=', stringsRetrieved);\n                    }\n\n                    let eltPrevInDom = self.addPrevNextButton(eltCloneSource, 'prev', stringsRetrieved);\n                    eltPrevInDom.addEventListener('click',\n                        function() {\n                            window.console.log('Clicked the prev button');\n                        });\n\n                    let eltNextInDom = self.addPrevNextButton(eltCloneSource, 'next', stringsRetrieved);\n                    eltNextInDom.addEventListener('click',\n                        function() {\n                            window.console.log('Clicked the next button');\n                        });\n                });\n        });\n    }\n\n    /**\n     *\n     * @param {DomElement} eltCloneSource\n     * @param {string} nextorprev\n     * @param {Array<string>} strings\n     * @returns The DomElement we just inserted\n     */\n    addPrevNextButton(eltCloneSource, nextorprev, strings) {\n        let eltClone = eltCloneSource.cloneNode();\n        const prevval = self.constructor.name + '-' + nextorprev;\n        const prevdisplay = strings[(nextorprev == 'prev' ? 0 : 1)];\n        eltClone.setAttribute('id', prevval);\n        eltClone.setAttribute('class', eltClone.getAttribute('class').replace('btn-primary', 'btn-secondary'));\n        eltClone.setAttribute('name', prevval);\n        eltClone.setAttribute('type', prevval);\n        eltClone.setAttribute('value', prevdisplay);\n        eltClone.setAttribute('data-initial-value', prevdisplay);\n\n        return eltCloneSource.parentNode.insertBefore(eltClone, eltCloneSource);\n    }\n}\n\n/**\n * Setup the module.\n *\n * @param {number} questionsperpage How many quiz questions to show at once.\n */\nexport const init = (questionsperpage) => {\n    let debug = false;\n    const FXN = 'block_quizonepagepaginate::init';\n    if (debug) { window.console.log(FXN + '::Started with questionsperpage=' + questionsperpage); }\n\n    M.block_quizonepagepaginate = new block_quizonepagepaginate(questionsperpage);\n    //if (debug) { window.console.log('M.block_quizonepagepaginate::Built class=', M.block_quizonepagepaginate); }\n    M.block_quizonepagepaginate.run();\n};"],"names":["block_quizonepagepaginate","constructor","questionsperpage","this","name","firstQuestionToShow","eltQuestionsSelector","eltQuizFinishAttemptButtonSelector","arrQuestions","run","self","getAllQuestions","hideShowQuestions","addNextPrevButtons","document","querySelectorAll","first","length","FXN","window","console","log","last","forEach","elt","index","setDisplayVal","displayVal","style","display","eltCloneSource","querySelector","stringsToRetrieve","key","component","require","str","get_strings","then","stringsRetrieved","addPrevNextButton","addEventListener","nextorprev","strings","eltClone","cloneNode","prevval","prevdisplay","setAttribute","getAttribute","replace","parentNode","insertBefore","M"],"mappings":";;;;;;;MAyBMA,0BACFC,YAAYC,kBAEGC,KACMF,YAAYG,KADlBD,KAKND,iBAAmBA,iBALbC,KAQNE,oBAAsB,EARhBF,KAWNG,qBAAuB,4CAXjBH,KAaNI,mCAAqC,+CAb/BJ,KAgBNK,aAAe,GAGxBC,UAEQC,KAAOP,KACCO,KAAKT,YAAYG,KAM7BM,KAAKC,kBACLD,KAAKE,kBAAkBF,KAAKL,oBAAqBK,KAAKR,kBACtDQ,KAAKG,qBAGTF,sBAEQD,KAAOP,KACCO,KAAKT,YAAYG,KAG7BM,KAAKF,aAAeM,SAASC,iBAAiBL,KAAKJ,sBAIvDM,wBAAkBI,6DAAQ,EAAGC,8CAErBP,KAAOP,WACLe,IAAMR,KAAKT,YAAYG,KAAO,qBACvBe,OAAOC,QAAQC,IAAIH,IAAM,iCAAkCF,MAAOC,cAEzEK,KAAON,MAAQC,OAErBP,KAAKF,aAAae,SAAQ,SAASC,IAAKC,OACpCN,OAAOC,QAAQC,IAAIH,IAAM,4BAA6BO,MAAOD,KACzDC,OAAST,OAASS,MAAQH,MACbH,OAAOC,QAAQC,IAAIH,IAAM,mBACtCR,KAAKgB,cAAcF,IAAK,WAEXL,OAAOC,QAAQC,IAAIH,IAAM,mBACtCR,KAAKgB,cAAcF,IAAK,YAKpCE,cAAcF,IAAKG,YACXH,IAAII,MAAMC,UAAYF,aACtBH,IAAII,MAAMC,QAAUF,YAI5Bd,yBAEQH,KAAOP,WACLe,IAAMR,KAAKT,YAAYG,KAAO,sBAEhCe,OAAOC,QAAQC,IAAIH,IAAM,0DACrBR,KAAKH,wCAGTuB,eAAiBhB,SAASiB,cAAcrB,KAAKH,0CAI3CyB,kBAAoB,CAAC,CACnBC,IAAK,WACLC,UAAW,QAEf,CACID,IAAK,OACLC,UAAW,SAKnBC,QAAQ,CAAC,aAAa,SAASC,KACdjB,OAAOC,QAAQC,IAAIH,IAAM,4CAA6Cc,mBAEnFI,IAAIC,YAAYL,mBAAmBM,MAC/B,SAASC,kBAEDpB,OAAOC,QAAQC,IAAIH,IAAM,4DAA6DqB,kBAGvE7B,KAAK8B,kBAAkBV,eAAgB,OAAQS,kBACrDE,iBAAiB,SAC1B,WACItB,OAAOC,QAAQC,IAAI,8BAGRX,KAAK8B,kBAAkBV,eAAgB,OAAQS,kBACrDE,iBAAiB,SAC1B,WACItB,OAAOC,QAAQC,IAAI,oCAa3CmB,kBAAkBV,eAAgBY,WAAYC,aACtCC,SAAWd,eAAee,kBACxBC,QAAUpC,KAAKT,YAAYG,KAAO,IAAMsC,WACxCK,YAAcJ,QAAuB,QAAdD,WAAuB,EAAI,UACxDE,SAASI,aAAa,KAAMF,SAC5BF,SAASI,aAAa,QAASJ,SAASK,aAAa,SAASC,QAAQ,cAAe,kBACrFN,SAASI,aAAa,OAAQF,SAC9BF,SAASI,aAAa,OAAQF,SAC9BF,SAASI,aAAa,QAASD,aAC/BH,SAASI,aAAa,qBAAsBD,aAErCjB,eAAeqB,WAAWC,aAAaR,SAAUd,+BAS3C5B,mBAKjBmD,EAAErD,0BAA4B,IAAIA,0BAA0BE,kBAE5DmD,EAAErD,0BAA0BS"}
{"version":3,"file":"module.min.js","sources":["../src/module.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * JS for this plugin.\n *\n * @copyright   IntegrityAdvocate.com\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n/* global window, M */\n/* eslint-env es6, node */\n/* eslint-disable no-control-regex, no-alert, max-len */\n\nclass block_quizonepagepaginate {\n    constructor(questionsperpage) {\n        let debug = false;\n        const self = this;\n        const FXN = self.constructor.name + '.constructor';\n        if (debug) { window.console.log(FXN + '::Started with questionsperpage=', questionsperpage); }\n\n        if (!self.shouldUseThisBlockJs()) {\n            if (debug) { window.console.log(FXN + '::We should not use this block JS'); }\n            return;\n        }\n\n        if (isNaN(questionsperpage)) {\n            throw FXN + '::Invalid value passed for param questionsperpage';\n        }\n\n        // How many quiz questions to show at one time.\n        self.questionsperpage = parseInt(questionsperpage);\n        // The index of the first quiz question to show.\n        self.firstQuestionToShow = 0;\n\n        // Used to locate the quiz questions on the page.\n        self.eltQuestionsSelector = '#page-mod-quiz-attempt #responseform .que';\n        // Used to place this plugin's JS-driven next/prev nav buttons.\n        self.eltQuizFinishAttemptButtonSelector = '#responseform .submitbtns .mod_quiz-next-nav';\n        // Button to show tne previous questions.\n        self.eltBqoppButtonPrev = self.constructor.name + '-prev';\n        // Button to show tne next questions.\n        self.eltBqoppButtonNext = self.constructor.name + '-next';\n\n        // Holds all the current page quiz questions, visible or not.\n        self.arrQuestions = [];\n    }\n\n    run() {\n        let debug = false;\n        const self = this;\n        const FXN = self.constructor.name + '.run';\n        if (debug) { window.console.log(FXN + '::Started with self.firstQuestionToShow=; self.questionsperpage=', self.firstQuestionToShow, self.questionsperpage); }\n\n        if (!self.shouldUseThisBlockJs()) {\n            if (debug) { window.console.log(FXN + '::We should not use this block JS'); }\n            return;\n        }\n\n        self.getAllQuestions();\n        self.addNextPrevButtons();\n\n        // Find the question index matching the question-* number.\n        const requestedQuestionIndex = self.getAnchorQuestionIndex();\n        if (debug) { window.console.log(FXN + '::Got requestedQuestionIndex=', requestedQuestionIndex); }\n        if (requestedQuestionIndex >= 0) {\n            self.firstQuestionToShow = requestedQuestionIndex;\n        }\n        self.hideShowQuestions(self.firstQuestionToShow, self.questionsperpage);\n    }\n\n    shouldUseThisBlockJs() {\n        let debug = false;\n        const self = this;\n        const FXN = self.constructor.name + '.getAnchorQuestionIndex';\n        if (debug) { window.console.log(FXN + '::Started'); }\n\n        // Use a result cache bc we will use it in the constructor and run() methods.\n        if (typeof self.shouldUseThisBlockJsVal == undefined) {\n            if (debug) { window.console.log(FXN + '::The self.shouldUseThisBlockJs is defined with val=', self.shouldUseThisBlockJsVal); }\n            return self.shouldUseThisBlockJsVal;\n        }\n        self.shouldUseThisBlockJsVal = document.body.id === 'page-mod-quiz-attempt';\n        if (debug) { window.console.log(FXN + '::Got self.shouldUseThisBlockJs=', self.shouldUseThisBlockJsVal); }\n        return self.shouldUseThisBlockJsVal;\n    }\n\n    /**\n     * If the URL anchor value matches /question-\\d+-\\d+/, get the index of the self.arrQuestions item that matches.\n     *\n     * @returns {number} The matchin index in self.arrQuestions; else -1.\n     */\n    getAnchorQuestionIndex() {\n        let debug = false;\n        const self = this;\n        const FXN = self.constructor.name + '.getAnchorQuestionIndex';\n        if (debug) { window.console.log(FXN + '::Started'); }\n\n        let questionIndex = -1;\n\n        const anchor = self.getAnchor();\n        if (debug) { window.console.log(FXN + '::Got anchor=', anchor); }\n        if (!anchor) {\n            return questionIndex;\n        }\n\n        const questionNrRequested = self.getAnchorQuestionNr(anchor);\n        if (!questionNrRequested) {\n            return questionIndex;\n        }\n\n        questionIndex = self.findQuestionIndexFromQuestionNr(questionNrRequested);\n\n        return questionIndex;\n    }\n\n    /**\n     * Get the URL anchor value.\n     *\n     * @returns {string} The URL anchor value (e.g. \"blah\" in url=http://bloo#blah); else return empty string.\n     */\n    getAnchor() {\n        return (document.URL.split('#').length > 1) ? document.URL.split('#')[1] : null;\n    }\n\n    /**\n     * Extract the question sequence number from the URL anchor text.\n     *\n     * @param {string} anchor The URL anchor string (e.g. \"blah\" in url=http://bloo#blah).\n     * @returns {string} The question number e.g. \"question-23-9\" from the URL anchor value (e.g. from http://bloo#question-23-9); else return empty string.\n     */\n    getAnchorQuestionNr(anchor = '') {\n        let debug = false;\n        const self = this;\n        const FXN = self.constructor.name + '.getAnchorQuestionNr';\n        if (debug) { window.console.log(FXN + '::Started'); }\n\n        // This value is in the format mm-nn where mm=the quiz attempt number; nn=the question index.\n        let questionNrRequested = '';\n\n        if (anchor && anchor.length > 2) {\n            const regexResults = anchor.match(/(question-\\d+-\\d+)/);\n            if (debug) { window.console.log(FXN + '::Got regexResults=', regexResults); }\n            if (regexResults) {\n                questionNrRequested = regexResults[1];\n            }\n        }\n        if (debug) { window.console.log(FXN + '::Got questionNrRequested=', questionNrRequested); }\n\n        return questionNrRequested;\n    }\n\n    /**\n     * Search self.arrQuestions for a question with number=questionNr.\n     *\n     * @param {str} questionNr The question number e.g. \"question-23-9\".\n     * @returns {number} The index of self.arrQuestions that matches; else -1.\n     */\n    findQuestionIndexFromQuestionNr(questionNr = '') {\n        let debug = false;\n        const self = this;\n        const FXN = self.constructor.name + '.findQuestionIndexFromQuestionNr';\n        if (debug) { window.console.log(FXN + '::Started'); }\n\n        let indexFound = -1;\n\n        if (!questionNr) {\n            window.console.log(FXN + '::Invalid value passed for param questionNr so return not found');\n            return indexFound;\n        }\n        if (self.arrQuestions.length < 1) {\n            window.console.log(FXN + '::arrQuestions is empty so return not found');\n            return indexFound;\n        }\n\n        self.arrQuestions.forEach(function(elt, index) {\n            if (debug) { window.console.log(FXN + '::Looking at index=; elt=', index, elt); }\n            if (elt.id === questionNr) {\n                if (debug) { window.console.log(FXN + '.forEach::Found matching index=', index); }\n                indexFound = index;\n                return;\n            }\n        });\n\n        if (debug) { window.console.log(FXN + '::About to return indexFound=', indexFound); }\n        return indexFound;\n    }\n\n    getAllQuestions() {\n        let debug = false;\n        const self = this;\n        const FXN = self.constructor.name + '.getAllQuestions';\n        if (debug) { window.console.log(FXN + '::Started'); }\n\n        self.arrQuestions = document.querySelectorAll(self.eltQuestionsSelector);\n        if (debug) { window.console.log(FXN + '::Found ' + self.arrQuestions.length + ' questions on the page'); }\n    }\n\n    hideShowQuestions(first = 0, length) {\n        let debug = false;\n        const self = M.block_quizonepagepaginate;\n        const FXN = self.constructor.name + '.hideShowQuestions';\n        if (debug) { window.console.log(FXN + '::Started with start=; length=', first, length); }\n\n        const last = first + length;\n        let countVisible = 0;\n\n        self.arrQuestions.forEach(function(elt, index) {\n            if (debug) { window.console.log(FXN + '::Looking at index=; elt=', index, elt); }\n            if (index >= first && index < last && countVisible < self.questionsperpage) {\n                if (debug) { window.console.log(FXN + '::Show this elt'); }\n                self.setDisplayVal(elt, 'block');\n                countVisible++;\n            } else {\n                if (debug) { window.console.log(FXN + '::Hide this elt'); }\n                self.setDisplayVal(elt, 'none');\n            }\n        });\n    }\n\n    scrollToQuestion(anchor = '') {\n        if (anchor.length < 1) {\n            document.querySelector('#responseform').scrollIntoView({\n                behavior: 'smooth'\n            });\n        }\n    }\n\n    setDisplayVal(elt, displayVal) {\n        elt.style.display = displayVal;\n    }\n\n    addNextPrevButtons() {\n        let debug = false;\n        const self = this;\n        const FXN = self.constructor.name + '.addNextPrevButtons';\n        if (debug) { window.console.log(FXN + '::Started with self.eltQuizFinishAttemptButtonSelector=', self.eltQuizFinishAttemptButtonSelector); }\n\n        const eltCloneSource = document.querySelector(self.eltQuizFinishAttemptButtonSelector);\n        if (eltCloneSource === null) {\n            throw FXN + '::No button found to clone';\n        }\n\n        // String are returned in a plain array in the same order specified here.\n        // E.g. [0 => \"Previous\", 1 => \"Next\"].\n        const stringsToRetrieve = [{\n                key: 'previous',\n                component: 'core'\n            },\n            {\n                key: 'next',\n                component: 'core',\n            }\n        ];\n\n        // We need core/str bc we get column names via ajax get_string later.\n        require(['core/str'], function(str) {\n            if (debug) { window.console.log(FXN + '.require::Started with stringsToRetrieve=', stringsToRetrieve); }\n\n            str.get_strings(stringsToRetrieve).then(\n                function(stringsRetrieved) {\n                    if (debug) { window.console.log(FXN + '.require.get_strings.then::Started with stringsRetrieved=', stringsRetrieved); }\n\n                    const eltPrevInDom = self.addPrevNextButton(eltCloneSource, 'prev', stringsRetrieved);\n                    eltPrevInDom.addEventListener('click', self.buttonClickedPrev);\n\n                    const eltNextInDom = self.addPrevNextButton(eltCloneSource, 'next', stringsRetrieved);\n                    eltNextInDom.addEventListener('click', self.buttonClickedNext);\n                });\n        });\n    }\n\n    /**\n     * Add buttons to the page to JS-navigate through the quiz questions on the page.\n     *\n     * @param {DomElement} eltCloneSource An existing button in the form buttons area.\n     * @param {string} nextorprev Which button to create; valid values=[prev, next]\n     * @param {Array<string>} strings Moodle lang strings for the buttons in the order they are created.\n     * @returns {DomElement} The DomElement we just inserted.\n     */\n    addPrevNextButton(eltCloneSource, nextorprev, strings) {\n        let debug = false;\n        const self = M.block_quizonepagepaginate;\n        const FXN = self.constructor.name + '.addPrevNextButton';\n        if (debug) { window.console.log(FXN + '::Started'); }\n\n        const eltClone = eltCloneSource.cloneNode();\n        const isPrev = nextorprev === 'prev';\n        const prevval = (isPrev ? self.eltBqoppButtonPrev : self.eltBqoppButtonNext);\n        const prevdisplay = strings[(isPrev ? 0 : 1)];\n        eltClone.setAttribute('id', prevval);\n        eltClone.setAttribute('class', eltClone.getAttribute('class').replace('btn-primary', 'btn-secondary'));\n        eltClone.setAttribute('name', prevval);\n        eltClone.setAttribute('type', prevval);\n        eltClone.setAttribute('value', prevdisplay);\n        eltClone.setAttribute('data-initial-value', prevdisplay);\n\n        return eltCloneSource.parentNode.insertBefore(eltClone, eltCloneSource);\n    }\n\n    buttonClickedPrev() {\n        let debug = false;\n        const self = M.block_quizonepagepaginate;\n        const FXN = self.constructor.name + '.buttonClickedPrev';\n        if (debug) { window.console.log(FXN + '::Started'); }\n\n        self.updateVisibleQuestionRange(false);\n        self.hideShowQuestions(self.firstQuestionToShow, self.questionsperpage);\n        self.scrollToQuestion();\n    }\n\n    buttonClickedNext() {\n        let debug = false;\n        const self = M.block_quizonepagepaginate;\n        const FXN = self.constructor.name + '.buttonClickedNext';\n        if (debug) { window.console.log(FXN + '::Started'); }\n\n        self.updateVisibleQuestionRange(true);\n        self.hideShowQuestions(self.firstQuestionToShow, self.questionsperpage);\n        self.scrollToQuestion();\n    }\n\n    updateVisibleQuestionRange(getNextSet = true) {\n        let debug = false;\n        const self = M.block_quizonepagepaginate;\n        const FXN = self.constructor.name + '.updateVisibleQuestionRange';\n        if (debug) {\n            window.console.log(FXN + '::Started with getNextSet=', getNextSet);\n        }\n\n        const firstOfAllQs = 0;\n        const lengthToShow = self.questionsperpage;\n        const lastOfAllQs = self.arrQuestions.length;\n        if (debug) { window.console.log(FXN + '::Start; firstOfAllQs=' + firstOfAllQs + '; lengthToShow=' + lengthToShow + '; lastOfAllQs=' + lastOfAllQs); }\n\n        if (getNextSet) {\n            // Propose to jump to the next set of questions.\n            const proposedStart = self.firstQuestionToShow + lengthToShow;\n            if (debug) { window.console.log(FXN + '::Proposed start of the next set of questions=', proposedStart); }\n\n            // Check that the [proposed range of setLength questions] is within the [total range of questions].\n            if (proposedStart + lengthToShow < lastOfAllQs) {\n                self.firstQuestionToShow = proposedStart;\n                if (debug) { window.console.log(FXN + '::The proposedStart + lengthToShow is below the max range, so set self.firstQuestionToShow=', self.firstQuestionToShow); }\n            } else {\n                self.firstQuestionToShow = lastOfAllQs - lengthToShow;\n                if (debug) { window.console.log(FXN + '::The proposedStart + lengthToShow is above the max range, so set self.firstQuestionToShow=', self.firstQuestionToShow); }\n            }\n        } else {\n            // Propose to jump to the next set of questions.\n            const proposedStart = self.firstQuestionToShow - lengthToShow;\n            window.console.log(FXN + '::Proposed start of the next set of questions=', proposedStart);\n\n            // Check that the [proposed range of setLength questions] is within the [total range of questions].\n            if (proposedStart < firstOfAllQs) {\n                if (debug) { window.console.log(FXN + '::The proposedStart is below the min range, so set self.firstQuestionToShow=', self.firstQuestionToShow); }\n                self.firstQuestionToShow = firstOfAllQs;\n            } else {\n                if (debug) { window.console.log(FXN + '::The proposedStart is within the min range, so set self.firstQuestionToShow=', self.firstQuestionToShow); }\n                self.firstQuestionToShow = proposedStart;\n            }\n        }\n\n        if (debug) { window.console.log(FXN + '::Done; firstOfAllQs=' + firstOfAllQs + '; lengthToShow=' + lengthToShow + '; lastOfAllQs=' + lastOfAllQs); }\n    }\n}\n\n/**\n * Setup the module.\n *\n * @param {number} questionsperpage How many quiz questions to show at once.\n */\nexport const init = (questionsperpage) => {\n    let debug = false;\n    const FXN = 'block_quizonepagepaginate::init';\n    if (debug) { window.console.log(FXN + '::Started with questionsperpage=' + questionsperpage); }\n\n    try {\n        M.block_quizonepagepaginate = new block_quizonepagepaginate(questionsperpage);\n        //if (debug) { window.console.log('M.block_quizonepagepaginate::Built class=', M.block_quizonepagepaginate); }\n        M.block_quizonepagepaginate.run();\n    } catch (e) {\n        window.console.error(e);\n    }\n};"],"names":["block_quizonepagepaginate","constructor","questionsperpage","FXN","this","name","shouldUseThisBlockJs","isNaN","parseInt","firstQuestionToShow","eltQuestionsSelector","eltQuizFinishAttemptButtonSelector","eltBqoppButtonPrev","eltBqoppButtonNext","arrQuestions","run","self","getAllQuestions","addNextPrevButtons","requestedQuestionIndex","getAnchorQuestionIndex","hideShowQuestions","undefined","shouldUseThisBlockJsVal","document","body","id","questionIndex","anchor","getAnchor","questionNrRequested","getAnchorQuestionNr","findQuestionIndexFromQuestionNr","URL","split","length","regexResults","match","questionNr","indexFound","window","console","log","forEach","elt","index","querySelectorAll","first","M","last","countVisible","setDisplayVal","scrollToQuestion","querySelector","scrollIntoView","behavior","displayVal","style","display","eltCloneSource","stringsToRetrieve","key","component","require","str","get_strings","then","stringsRetrieved","addPrevNextButton","addEventListener","buttonClickedPrev","buttonClickedNext","nextorprev","strings","eltClone","cloneNode","isPrev","prevval","prevdisplay","setAttribute","getAttribute","replace","parentNode","insertBefore","updateVisibleQuestionRange","getNextSet","lengthToShow","lastOfAllQs","proposedStart","e","error"],"mappings":"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"}
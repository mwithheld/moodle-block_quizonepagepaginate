{"version":3,"file":"module.min.js","sources":["../src/module.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * JS for this plugin.\n *\n * @copyright   IntegrityAdvocate.com\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n/* global window, M, $ */\n/* eslint-env es6, node */\n/* eslint-disable no-control-regex, no-alert */\n\nclass block_quizonepagepaginate {\n    constructor(questionsperpage) {\n        let debug = false;\n        let self = this;\n        const FXN = self.constructor.name + '.constructor';\n        if (debug) { window.console.log(FXN + '::Started'); }\n\n        // Init class vars.\n        // How many quiz questions to show at one time.\n        self.questionsperpage = questionsperpage;\n\n        // Used to locate the quiz questions on the page.\n        self.eltQuestionsSelector = '#page-mod-quiz-attempt #responseform .que';\n        // Used to place this plugin's JS-driven next/prev nav buttons.\n        self.eltQuizFinishAttemptButtonSelector = '#responseform .submitbtns .mod_quiz-next-nav';\n\n        // Holds all the current page quiz questions, visible or not.\n        self.arrQuestions = [];\n    }\n\n    run() {\n        let debug = false;\n        let self = this;\n        const FXN = self.constructor.name + '.run';\n        if (debug) { window.console.log(FXN + '::Started'); }\n\n        self.getAllQuestions();\n        self.hideAllQuestions();\n        self.showQuestions();\n        self.addNextPrevButtons();\n    }\n\n    getAllQuestions() {\n        let debug = true;\n        let self = this;\n        const FXN = self.constructor.name + '.getAllQuestions';\n        if (debug) { window.console.log(FXN + '::Started'); }\n\n        self.arrQuestions = document.querySelectorAll(self.eltQuestionsSelector);\n        if (debug) { window.console.log(FXN + '::Found ' + self.arrQuestions.length + ' questions on the page'); }\n    }\n\n    hideAllQuestions() {\n        let debug = true;\n        let self = this;\n        const FXN = self.constructor.name + '.hideAllQuestions';\n        if (debug) { window.console.log(FXN + '::Started'); }\n\n        window.console.log(FXN + '::About to hide all ' + self.arrQuestions.length + ' quiz questions on the page');\n        Array.from(self.arrQuestions).forEach(elt => (elt.style.display = 'none'));\n    }\n\n    showQuestions() {\n        let debug = true;\n        let self = this;\n        const FXN = self.constructor.name + '.showQuestions';\n        if (debug) { window.console.log(FXN + '::Started'); }\n\n        window.console.log(FXN + '::About to unhide the first ' + self.questionsperpage + ' quiz questions');\n        Array.from(self.arrQuestions).slice(0, self.questionsperpage).forEach(elt => (elt.style.display = 'block'));\n    }\n\n    addNextPrevButtons() {\n        let debug = true;\n        let self = this;\n        const FXN = self.constructor.name + '.showQuestions';\n        if (debug) {\n            window.console.log(FXN + '::Started with self.eltQuizFinishAttemptButtonSelector=',\n                self.eltQuizFinishAttemptButtonSelector);\n        }\n\n        var elt = document.querySelector(self.eltQuizFinishAttemptButtonSelector);\n        // We need core/str bc we get column names via ajax get_string later.\n        require(['core/str'], function(str) {\n            var eltPrev = elt.cloneNode();\n            var prevval = self.constructor.name + '-prev';\n            var stringispresent_prevdisplay = str.get_string('previous', 'core');\n            eltPrev.setAttribute('id', prevval);\n            eltPrev.setAttribute('class', eltPrev.getAttribute('class').replace('btn-primary', 'btn-secondary'));\n            eltPrev.setAttribute('name', prevval);\n            eltPrev.setAttribute('type', prevval);\n            $.when(stringispresent_prevdisplay).done(function(prevdisplay) {\n                eltPrev.setAttribute('value', prevdisplay);\n                eltPrev.setAttribute('data-initial-value', prevdisplay);\n            });\n            elt.parentNode.insertBefore(eltPrev, elt);\n\n            var eltNext = elt.cloneNode();\n            var nextval = self.constructor.name + '-next';\n            var stringispresent_nextdisplay = str.get_string('next', 'core');\n            eltNext.setAttribute('id', nextval);\n            eltNext.setAttribute('class', eltNext.getAttribute('class').replace('btn-primary', 'btn-secondary'));\n            eltNext.setAttribute('name', nextval);\n            eltNext.setAttribute('type', nextval);\n            $.when(stringispresent_nextdisplay).done(function(nextdisplay) {\n                eltNext.setAttribute('value', nextdisplay);\n                eltNext.setAttribute('data-initial-value', nextdisplay);\n            });\n            elt.parentNode.insertBefore(eltNext, elt);\n        });\n    }\n\n}\n\n/**\n * Setup the module.\n *\n * @param {number} questionsperpage How many quiz questions to show at once.\n */\nexport const init = (questionsperpage) => {\n    let debug = false;\n    const FXN = 'block_quizonepagepaginate::init';\n    if (debug) { window.console.log(FXN + '::Started with questionsperpage=' + questionsperpage); }\n\n    M.block_quizonepagepaginate = new block_quizonepagepaginate(questionsperpage);\n    //if (debug) { window.console.log('M.block_quizonepagepaginate::Built class=', M.block_quizonepagepaginate); }\n    M.block_quizonepagepaginate.run();\n};"],"names":["block_quizonepagepaginate","constructor","questionsperpage","this","name","eltQuestionsSelector","eltQuizFinishAttemptButtonSelector","arrQuestions","run","getAllQuestions","hideAllQuestions","showQuestions","addNextPrevButtons","self","FXN","window","console","log","document","querySelectorAll","length","Array","from","forEach","elt","style","display","slice","querySelector","require","str","eltPrev","cloneNode","prevval","stringispresent_prevdisplay","get_string","setAttribute","getAttribute","replace","$","when","done","prevdisplay","parentNode","insertBefore","eltNext","nextval","stringispresent_nextdisplay","nextdisplay","M"],"mappings":";;;;;;;MAyBMA,0BACFC,YAAYC,kBAEGC,KACMF,YAAYG,KADlBD,KAMND,iBAAmBA,iBANbC,KASNE,qBAAuB,4CATjBF,KAWNG,mCAAqC,+CAX/BH,KAcNI,aAAe,GAGxBC,MAEeL,KACMF,YAAYG,KADlBD,KAINM,kBAJMN,KAKNO,mBALMP,KAMNQ,gBANMR,KAONS,qBAGTH,sBAEQI,KAAOV,WACLW,IAAMD,KAAKZ,YAAYG,KAAO,mBACvBW,OAAOC,QAAQC,IAAIH,IAAM,aAEtCD,KAAKN,aAAeW,SAASC,iBAAiBN,KAAKR,sBACtCU,OAAOC,QAAQC,IAAIH,IAAM,WAAaD,KAAKN,aAAaa,OAAS,0BAGlFV,yBAGUI,IADKX,KACMF,YAAYG,KAAO,oBACvBW,OAAOC,QAAQC,IAAIH,IAAM,aAEtCC,OAAOC,QAAQC,IAAIH,IAAM,uBAJdX,KAI4CI,aAAaa,OAAS,+BAC7EC,MAAMC,KALKnB,KAKKI,cAAcgB,SAAQC,KAAQA,IAAIC,MAAMC,QAAU,SAGtEf,sBAGUG,IADKX,KACMF,YAAYG,KAAO,iBACvBW,OAAOC,QAAQC,IAAIH,IAAM,aAEtCC,OAAOC,QAAQC,IAAIH,IAAM,+BAJdX,KAIoDD,iBAAmB,mBAClFmB,MAAMC,KALKnB,KAKKI,cAAcoB,MAAM,EALzBxB,KAKiCD,kBAAkBqB,SAAQC,KAAQA,IAAIC,MAAMC,QAAU,UAGtGd,yBAEQC,KAAOV,WACLW,IAAMD,KAAKZ,YAAYG,KAAO,iBAEhCW,OAAOC,QAAQC,IAAIH,IAAM,0DACrBD,KAAKP,wCAGTkB,IAAMN,SAASU,cAAcf,KAAKP,oCAEtCuB,QAAQ,CAAC,aAAa,SAASC,SACvBC,QAAUP,IAAIQ,YACdC,QAAUpB,KAAKZ,YAAYG,KAAO,QAClC8B,4BAA8BJ,IAAIK,WAAW,WAAY,QAC7DJ,QAAQK,aAAa,KAAMH,SAC3BF,QAAQK,aAAa,QAASL,QAAQM,aAAa,SAASC,QAAQ,cAAe,kBACnFP,QAAQK,aAAa,OAAQH,SAC7BF,QAAQK,aAAa,OAAQH,SAC7BM,EAAEC,KAAKN,6BAA6BO,MAAK,SAASC,aAC9CX,QAAQK,aAAa,QAASM,aAC9BX,QAAQK,aAAa,qBAAsBM,gBAE/ClB,IAAImB,WAAWC,aAAab,QAASP,SAEjCqB,QAAUrB,IAAIQ,YACdc,QAAUjC,KAAKZ,YAAYG,KAAO,QAClC2C,4BAA8BjB,IAAIK,WAAW,OAAQ,QACzDU,QAAQT,aAAa,KAAMU,SAC3BD,QAAQT,aAAa,QAASS,QAAQR,aAAa,SAASC,QAAQ,cAAe,kBACnFO,QAAQT,aAAa,OAAQU,SAC7BD,QAAQT,aAAa,OAAQU,SAC7BP,EAAEC,KAAKO,6BAA6BN,MAAK,SAASO,aAC9CH,QAAQT,aAAa,QAASY,aAC9BH,QAAQT,aAAa,qBAAsBY,gBAE/CxB,IAAImB,WAAWC,aAAaC,QAASrB,uBAW5BtB,mBAKjB+C,EAAEjD,0BAA4B,IAAIA,0BAA0BE,kBAE5D+C,EAAEjD,0BAA0BQ"}
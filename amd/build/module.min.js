define("block_quizonepagepaginate/module",["exports"],(function(_exports){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0;
/**
   * JS for this plugin.
   *
   * @copyright   IntegrityAdvocate.com
   * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
class block_quizonepagepaginate{constructor(versionstring,questionsperpage){const fxn=this.constructor.name+".constructor";if(window.console.log(fxn+"::Started with versionstring="+versionstring+"; questionsperpage="+questionsperpage),this.isAQuizAttemptPage()){if(isNaN(questionsperpage))throw new Error(fxn+"::Invalid value passed for param questionsperpage");if(this.questionsperpage=parseInt(questionsperpage),this.questionsperpage<1)throw new Error(fxn+"::Invalid value passed for param questionsperpage");this.firstQuestionToShow=0,this.eltQuestionsSelector="#page-mod-quiz-attempt #responseform .que",this.eltQuizFinishAttemptButtonSelector="#responseform .submitbtns .mod_quiz-next-nav",this.eltBqoppButtonPrev=this.constructor.name+"-prev",this.eltBqoppButtonNext=this.constructor.name+"-next",this.arrQuestions=[]}}run(){const self=this,fxn=self.constructor.name+".run";if(!self.isAQuizAttemptPage()||!self.shouldQuizPaginate())return void window.console.log(fxn+"::We should not use this block JS: self.isAQuizAttemptPage()="+self.isAQuizAttemptPage()+"; self.shouldQuizPaginate()="+self.shouldQuizPaginate());self.getAllQuestions(),self.addNextPrevButtons(),window.addEventListener("hashchange",self.handleAnchorChange);const requestedQuestionIndex=self.getAnchorQuestionIndex(document.URL);requestedQuestionIndex>=0&&(self.firstQuestionToShow=requestedQuestionIndex),self.hideShowQuestions(self.firstQuestionToShow,self.questionsperpage)}isAQuizAttemptPage(){return"page-mod-quiz-attempt"===document.body.id}shouldQuizPaginate(){this.constructor.name;let shouldQuizPaginate=!1;return this.getAllQuestions(),shouldQuizPaginate=this.questionsperpage<this.arrQuestions.length,shouldQuizPaginate}getAnchorQuestionIndex(){let url=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";this.constructor.name;let questionIndex=-1;const anchor=this.getAnchor(url);if(!anchor||anchor.length<"question-1-1".length)return questionIndex;const questionNrRequested=this.getAnchorQuestionNr(anchor);return questionNrRequested?(questionIndex=this.findQuestionIndexFromQuestionNr(questionNrRequested),questionIndex):questionIndex}getAnchor(){let url=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(!url||url.length<1||"string"!=typeof url)return"";const anchor=url.split("#")[1];return anchor||""}getAnchorQuestionNr(){let anchor=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";this.constructor.name;let questionNrRequested="";if(anchor&&anchor.length>2){const regexResults=anchor.match(/(question-\d+-\d+)/);regexResults&&(questionNrRequested=regexResults[1])}return questionNrRequested}findQuestionIndexFromQuestionNr(){let questionNr=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";const fxn=this.constructor.name+".findQuestionIndexFromQuestionNr";let indexFound=-1;return!questionNr||"string"!=typeof questionNr||questionNr.length<"question-1-1".length?(window.console.log(fxn+"::Invalid value passed for questionNr so return not found"),indexFound):this.arrQuestions.length<1?(window.console.log(fxn+"::arrQuestions is empty so return not found"),indexFound):(this.arrQuestions.forEach(((elt,index)=>{elt.id!==questionNr||(indexFound=index)})),indexFound)}getAllQuestions(){const self=this;self.constructor.name;return void 0!==self.arrQuestions&&self.arrQuestions.length>0||(self.arrQuestions=document.querySelectorAll(self.eltQuestionsSelector)),self.arrQuestions}hideShowQuestions(){let first=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,length=arguments.length>1?arguments[1]:void 0;const self=M.block_quizonepagepaginate,fxn=self.constructor.name+".hideShowQuestions";if(isNaN(first)||isNaN(length)||first<0||length<1)throw new Error(fxn+"::Invalid value passed for param first or length");if(self.arrQuestions.length<1)throw new Error(fxn+"::self.arrQuestions is empty");const last=first+length;let countVisible=0;self.arrQuestions.forEach(((elt,index)=>{index>=first&&index<last&&countVisible<self.questionsperpage?(elt.classList.remove("quizonepage-hidden"),countVisible++):elt.classList.add("quizonepage-hidden")})),self.updatePrevNextButtonVisibility()}scrollToQuestion(){document.querySelector("#responseform").scrollIntoView({behavior:"smooth"})}addNextPrevButtons(){const self=this,fxn=self.constructor.name+".addNextPrevButtons",eltCloneSource=document.querySelector(self.eltQuizFinishAttemptButtonSelector);if(null===eltCloneSource)throw new Error(fxn+"::No button found to clone");const stringsToRetrieve=[{key:"previous",component:"core"},{key:"next",component:"core"}];require(["core/str"],(function(str){str.get_strings(stringsToRetrieve).then((function(stringsRetrieved){self.addPrevNextButton(eltCloneSource,"prev",stringsRetrieved).addEventListener("click",self.buttonClickedPrev);return self.addPrevNextButton(eltCloneSource,"next",stringsRetrieved).addEventListener("click",self.buttonClickedNext),stringsRetrieved})).catch((function(err){throw console.error(fxn+"::Failed to get strings",err),err}))}))}addPrevNextButton(eltCloneSource,nextorprev,strings){const self=M.block_quizonepagepaginate,fxn=self.constructor.name+".addPrevNextButton";if(!(eltCloneSource instanceof Element))throw new Error(fxn+"::Invalid value passed for param eltCloneSource");if("prev"!==nextorprev&&"next"!==nextorprev)throw new Error(fxn+"::Invalid value passed for param nextorprev");if(!Array.isArray(strings)||strings.length<2)throw new Error(fxn+"::Invalid value passed for param strings");const isPrev="prev"===nextorprev,btnname=isPrev?self.eltBqoppButtonPrev:self.eltBqoppButtonNext,btnvalue=strings[isPrev?0:1],eltClone=eltCloneSource.cloneNode(!0);return eltClone.setAttribute("id",btnname),eltClone.className=eltClone.className.replace("btn-primary","btn-secondary"),eltClone.name=btnname,eltClone.type="button",eltClone.setAttribute("value",btnvalue),eltClone.setAttribute("data-initial-value",btnvalue),eltClone.removeAttribute("disabled"),self.updatePrevNextButtonVisibility(),eltCloneSource.parentNode.insertBefore(eltClone,eltCloneSource)}updatePrevNextButtonVisibility(){const self=M.block_quizonepagepaginate,prevBtn=(self.constructor.name,document.getElementById(self.eltBqoppButtonPrev)),nextBtn=document.getElementById(self.eltBqoppButtonNext);if(prevBtn&&(self.firstQuestionToShow<=0?(prevBtn.setAttribute("disabled","disabled"),prevBtn.classList.add("disabled")):(prevBtn.removeAttribute("disabled"),prevBtn.classList.remove("disabled"))),nextBtn){const lastPageStart=self.arrQuestions.length-self.questionsperpage;self.firstQuestionToShow>=lastPageStart?(nextBtn.setAttribute("disabled","disabled"),nextBtn.classList.add("disabled")):(nextBtn.removeAttribute("disabled"),nextBtn.classList.remove("disabled"))}}buttonClickedPrev(){const self=M.block_quizonepagepaginate;self.constructor.name;self.triggerAutosave(),self.updateVisibleQuestionRange(!1),self.hideShowQuestions(self.firstQuestionToShow,self.questionsperpage),self.scrollToQuestion(),self.updatePrevNextButtonVisibility()}buttonClickedNext(){const self=M.block_quizonepagepaginate;self.constructor.name;self.triggerAutosave(),self.updateVisibleQuestionRange(!0),self.hideShowQuestions(self.firstQuestionToShow,self.questionsperpage),self.scrollToQuestion(),self.updatePrevNextButtonVisibility()}triggerAutosave(){const fxn=M.block_quizonepagepaginate.constructor.name+".triggerAutosave";try{M.mod_quiz.autosave.save_changes()}catch(error){window.console.log(fxn+"::autosave is disabled")}}updateVisibleQuestionRange(){let getNextSet=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];const self=M.block_quizonepagepaginate,fxn=self.constructor.name+".updateVisibleQuestionRange",lengthToShow=self.questionsperpage,lastOfAllQs=self.arrQuestions.length;if(getNextSet){const proposedStart=self.firstQuestionToShow+lengthToShow;self.firstQuestionToShow=proposedStart+lengthToShow<lastOfAllQs?proposedStart:lastOfAllQs-lengthToShow}else{const proposedStart=self.firstQuestionToShow-lengthToShow;window.console.log(fxn+"::Proposed start of the next set of questions=",proposedStart),self.firstQuestionToShow=proposedStart<0?0:proposedStart}}handleAnchorChange(e){const self=M.block_quizonepagepaginate,target=(self.constructor.name,e.target||e.srcElement);let foundHref="";if(self.isWindowObj(target)&&(foundHref=window.location.href),foundHref.length<1){if(!target.closest("#mod_quiz_navblock"))return;const closestA=target.closest("a.qnbutton");if(!closestA)return;foundHref=closestA.href}if(foundHref.length<1)return;const requestedQuestionIndex=self.getAnchorQuestionIndex(foundHref);requestedQuestionIndex>=0&&(self.firstQuestionToShow=requestedQuestionIndex),self.hideShowQuestions(self.firstQuestionToShow,self.questionsperpage)}isWindowObj(obj){return obj&&obj.document&&obj.location&&obj.alert&&obj.setInterval}}_exports.init=(versionstring,questionsperpage)=>{try{M.block_quizonepagepaginate=new block_quizonepagepaginate(versionstring,questionsperpage),M.block_quizonepagepaginate.run()}catch(e){window.console.error(e)}}}));

//# sourceMappingURL=module.min.js.map
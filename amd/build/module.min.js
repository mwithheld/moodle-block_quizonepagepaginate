define("block_quizonepagepaginate/module",["exports"],(function(_exports){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0;
/**
   * JS for this plugin.
   *
   * @copyright   IntegrityAdvocate.com
   * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
class block_quizonepagepaginate{constructor(versionstring,questionsperpage){const fxn=this.constructor.name+".constructor";if(window.console.log(fxn+"::Started with versionstring="+versionstring+"; questionsperpage="+questionsperpage),this.isAQuizAttemptPage()){if(isNaN(questionsperpage))throw new Error(fxn+"::Invalid value passed for param questionsperpage");if(this.questionsperpage=parseInt(questionsperpage),this.questionsperpage<1)throw new Error(fxn+"::Invalid value passed for param questionsperpage");this.firstQuestionToShow=0,this.eltQuestionsSelector="#page-mod-quiz-attempt #responseform .que",this.eltQuizFinishAttemptButtonSelector="#responseform .submitbtns .mod_quiz-next-nav",this.eltBqoppButtonPrev=this.constructor.name+"-prev",this.eltBqoppButtonNext=this.constructor.name+"-next",this.arrQuestions=[]}else window.console.log(fxn+"::We should not use this block JS bc this is not a quiz attempt page")}run(){const self=this,fxn=self.constructor.name+".run";if(window.console.log(fxn+"::Started with self.firstQuestionToShow=; self.questionsperpage=",self.firstQuestionToShow,self.questionsperpage),!self.isAQuizAttemptPage()||!self.shouldQuizPaginate())return void window.console.log(fxn+"::We should not use this block JS: self.isAQuizAttemptPage()="+self.isAQuizAttemptPage()+"; self.shouldQuizPaginate()="+self.shouldQuizPaginate());self.getAllQuestions(),window.console.log(fxn+"::About to self.addNextPrevButtons()"),self.addNextPrevButtons(),window.addEventListener("hashchange",self.handleAnchorChange);const requestedQuestionIndex=self.getAnchorQuestionIndex(document.URL);window.console.log(fxn+"::Got requestedQuestionIndex=",requestedQuestionIndex),requestedQuestionIndex>=0&&(self.firstQuestionToShow=requestedQuestionIndex),self.hideShowQuestions(self.firstQuestionToShow,self.questionsperpage)}isAQuizAttemptPage(){return"page-mod-quiz-attempt"===document.body.id}shouldQuizPaginate(){const fxn=this.constructor.name+".shouldQuizPaginate";window.console.log(fxn+"::Started");let shouldQuizPaginate=!1;return this.getAllQuestions(),shouldQuizPaginate=this.questionsperpage<this.arrQuestions.length,window.console.log(fxn+"::Got self.questionsperpage="+this.questionsperpage+" is it < self.arrQuestions.length="+this.arrQuestions.length,shouldQuizPaginate),shouldQuizPaginate}getAnchorQuestionIndex(){let url=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";const fxn=this.constructor.name+".getAnchorQuestionIndex";window.console.log(fxn+"::Started");let questionIndex=-1;const anchor=this.getAnchor(url);if(window.console.log(fxn+"::Got anchor=",anchor),!anchor||anchor.length<"question-1-1".length)return window.console.log(fxn+"::No anchor  so return questionIndex=",questionIndex),questionIndex;const questionNrRequested=this.getAnchorQuestionNr(anchor);return questionNrRequested?(questionIndex=this.findQuestionIndexFromQuestionNr(questionNrRequested),questionIndex):questionIndex}getAnchor(){let url=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(!url||url.length<1||"string"!=typeof url)return"";const anchor=url.split("#")[1];return anchor||""}getAnchorQuestionNr(){let anchor=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";const fxn=this.constructor.name+".getAnchorQuestionNr";window.console.log(fxn+"::Started");let questionNrRequested="";if(anchor&&anchor.length>2){const regexResults=anchor.match(/(question-\d+-\d+)/);window.console.log(fxn+"::Got regexResults=",regexResults),regexResults&&(questionNrRequested=regexResults[1])}return window.console.log(fxn+"::Got questionNrRequested=",questionNrRequested),questionNrRequested}findQuestionIndexFromQuestionNr(){let questionNr=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";const fxn=this.constructor.name+".findQuestionIndexFromQuestionNr";window.console.log(fxn+"::Started with questionNr=",questionNr);let indexFound=-1;return!questionNr||"string"!=typeof questionNr||questionNr.length<"question-1-1".length?(window.console.log(fxn+"::Invalid value passed for questionNr so return not found"),indexFound):this.arrQuestions.length<1?(window.console.log(fxn+"::arrQuestions is empty so return not found"),indexFound):(this.arrQuestions.forEach(((elt,index)=>{if(window.console.log(fxn+"::Looking at index="+index+"; elt=",elt),elt.id===questionNr)return window.console.log(fxn+".forEach::Found matching index=",index),void(indexFound=index)})),window.console.log(fxn+"::About to return indexFound=",indexFound),indexFound)}getAllQuestions(){const self=this,fxn=self.constructor.name+".getAllQuestions";return window.console.log(fxn+"::Started"),void 0!==self.arrQuestions&&self.arrQuestions.length>0?(window.console.log(fxn+"::self.arrQuestions is already populated so just return it"),self.arrQuestions):(self.arrQuestions=document.querySelectorAll(self.eltQuestionsSelector),window.console.log(fxn+"::Found "+self.arrQuestions.length+" questions on the page"),self.arrQuestions)}hideShowQuestions(){let first=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,length=arguments.length>1?arguments[1]:void 0;const self=M.block_quizonepagepaginate,fxn=self.constructor.name+".hideShowQuestions";if(window.console.log(fxn+"::Started with first="+first+"; length="+length),isNaN(first)||isNaN(length)||first<0||length<1)throw new Error(fxn+"::Invalid value passed for param first or length");if(self.arrQuestions.length<1)throw new Error(fxn+"::self.arrQuestions is empty");const last=first+length;let countVisible=0;self.arrQuestions.forEach(((elt,index)=>{window.console.log(fxn+"::Looking at question index="+index+"; elt=",elt),index>=first&&index<last&&countVisible<self.questionsperpage?(window.console.log(fxn+"::Show this elt  ",elt),elt.classList.remove("quizonepage-hidden"),countVisible++):(window.console.log(fxn+"::Hide this elt",elt),elt.classList.add("quizonepage-hidden"))})),self.updatePrevNextButtonVisibility()}addNextPrevButtons(){const self=this,fxn=self.constructor.name+".addNextPrevButtons";window.console.log(fxn+"::Started with self.eltQuizFinishAttemptButtonSelector=",self.eltQuizFinishAttemptButtonSelector);const eltCloneSource=document.querySelector(self.eltQuizFinishAttemptButtonSelector);if(null===eltCloneSource)throw new Error(fxn+"::No button found to clone");const stringsToRetrieve=[{key:"previous",component:"core"},{key:"next",component:"core"}];require(["core/str"],(function(str){window.console.log(fxn+".require::Started with stringsToRetrieve=",stringsToRetrieve),str.get_strings(stringsToRetrieve).then((function(stringsRetrieved){window.console.log(fxn+".require.get_strings.then::Started with stringsRetrieved=",stringsRetrieved);self.addPrevNextButton(eltCloneSource,"prev",stringsRetrieved).addEventListener("click",self.buttonClickedPrev);return self.addPrevNextButton(eltCloneSource,"next",stringsRetrieved).addEventListener("click",self.buttonClickedNext),stringsRetrieved})).catch((function(err){throw console.error(fxn+"::Failed to get strings",err),err}))}))}addPrevNextButton(eltCloneSource,nextorprev,strings){const self=M.block_quizonepagepaginate,fxn=self.constructor.name+".addPrevNextButton";if(window.console.log(fxn+"::Started wih eltCloneSource=; nextorprev=; strings=",eltCloneSource,nextorprev,strings),!(eltCloneSource instanceof Element))throw new Error(fxn+"::Invalid value passed for param eltCloneSource");if("prev"!==nextorprev&&"next"!==nextorprev)throw new Error(fxn+"::Invalid value passed for param nextorprev");if(!Array.isArray(strings)||strings.length<2)throw new Error(fxn+"::Invalid value passed for param strings");window.console.log(fxn+"::Done validating params");const isPrev="prev"===nextorprev,btnname=isPrev?self.eltBqoppButtonPrev:self.eltBqoppButtonNext,btnvalue=strings[isPrev?0:1],eltClone=eltCloneSource.cloneNode(!0);return eltClone.setAttribute("id",btnname),eltClone.className=eltClone.className.replace("btn-primary","btn-secondary"),eltClone.className=eltClone.className.replace("mod_quiz-next-nav","block_quizonepagepaginate-"+btnname),eltClone.name=btnname,eltClone.type="button",eltClone.setAttribute("value",btnvalue),eltClone.setAttribute("data-initial-value",btnvalue),eltClone.removeAttribute("disabled"),self.updatePrevNextButtonVisibility(),eltCloneSource.parentNode.insertBefore(eltClone,eltCloneSource)}updatePrevNextButtonVisibility(){const self=M.block_quizonepagepaginate,fxn=self.constructor.name+".updatePrevNextButtonVisibility";window.console.log(fxn+"::Started");const prevBtn=document.getElementById(self.eltBqoppButtonPrev),nextBtn=document.getElementById(self.eltBqoppButtonNext);if(prevBtn&&(self.firstQuestionToShow<=0?(prevBtn.setAttribute("disabled","disabled"),prevBtn.classList.add("disabled")):(prevBtn.removeAttribute("disabled"),prevBtn.classList.remove("disabled"))),nextBtn){const lastPageStart=self.arrQuestions.length-self.questionsperpage;self.firstQuestionToShow>=lastPageStart?(nextBtn.setAttribute("disabled","disabled"),nextBtn.classList.add("disabled")):(nextBtn.removeAttribute("disabled"),nextBtn.classList.remove("disabled"))}}buttonClickedPrev(){const self=M.block_quizonepagepaginate,fxn=self.constructor.name+".buttonClickedPrev";window.console.log(fxn+"::Started"),self.triggerAutosave(),self.updateVisibleQuestionRange(!1),self.hideShowQuestions(self.firstQuestionToShow,self.questionsperpage),self.updatePrevNextButtonVisibility()}buttonClickedNext(){const self=M.block_quizonepagepaginate,fxn=self.constructor.name+".buttonClickedNext";window.console.log(fxn+"::Started"),self.triggerAutosave(),window.console.log(fxn+"::Done triggerAutosave"),self.updateVisibleQuestionRange(!0),window.console.log(fxn+"::Done updateVisibleQuestionRange"),self.hideShowQuestions(self.firstQuestionToShow,self.questionsperpage),window.console.log(fxn+"::Done hideShowQuestions"),self.updatePrevNextButtonVisibility(),window.console.log(fxn+"::Done updatePrevNextButtonVisibility")}triggerAutosave(){const fxn=M.block_quizonepagepaginate.constructor.name+".triggerAutosave";window.console.log(fxn+"::Started");try{window.console.log(fxn+"::About to trigger autosave"),M.mod_quiz.autosave.save_changes()}catch(error){window.console.log(fxn+"::autosave is disabled")}}updateVisibleQuestionRange(){let getNextSet=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];const self=M.block_quizonepagepaginate,fxn=self.constructor.name+".updateVisibleQuestionRange";window.console.log(fxn+"::Started with getNextSet=",getNextSet);const lengthToShow=self.questionsperpage,lastOfAllQs=self.arrQuestions.length;if(window.console.log(fxn+"::Start; firstOfAllQs=0; lengthToShow="+lengthToShow+"; lastOfAllQs="+lastOfAllQs),getNextSet){const proposedStart=self.firstQuestionToShow+lengthToShow;window.console.log(fxn+"::Proposed start of the next set of questions=",proposedStart),proposedStart+lengthToShow<lastOfAllQs?(self.firstQuestionToShow=proposedStart,window.console.log(fxn+"::The proposedStart + lengthToShow is below the max range, so set self.firstQuestionToShow=",self.firstQuestionToShow)):(self.firstQuestionToShow=lastOfAllQs-lengthToShow,window.console.log(fxn+"::The proposedStart + lengthToShow is above the max range, so set self.firstQuestionToShow=",self.firstQuestionToShow))}else{const proposedStart=self.firstQuestionToShow-lengthToShow;window.console.log(fxn+"::Proposed start of the next set of questions=",proposedStart),proposedStart<0?(window.console.log(fxn+"::The proposedStart is below the min range, so set self.firstQuestionToShow=",self.firstQuestionToShow),self.firstQuestionToShow=0):(window.console.log(fxn+"::The proposedStart is within the min range, so set self.firstQuestionToShow=",self.firstQuestionToShow),self.firstQuestionToShow=proposedStart)}window.console.log(fxn+"::Done; firstOfAllQs=0; lengthToShow="+lengthToShow+"; lastOfAllQs="+lastOfAllQs)}handleAnchorChange(e){const self=M.block_quizonepagepaginate,fxn=self.constructor.name+".handleAnchorChange";window.console.log(fxn+"::Started with e=",e);const target=e.target||e.srcElement;window.console.log("Found target=",target);let foundHref="";if(self.isWindowObj(target)&&(foundHref=window.location.href,window.console.log(fxn+"::Found window href=",foundHref)),foundHref.length<1){if(!target.closest("#mod_quiz_navblock"))return void window.console.log("The target is not a child of the quiz navigation block so just return");const closestA=target.closest("a.qnbutton");if(window.console.log("Found closestA=",closestA),!closestA)return void window.console.log("This is not a targeted element so just return");foundHref=closestA.href,window.console.log("Found foundHref",foundHref)}if(foundHref.length<1)return void window.console.log("No valid href found so just return");const requestedQuestionIndex=self.getAnchorQuestionIndex(foundHref);window.console.log(fxn+"::Got requestedQuestionIndex=",requestedQuestionIndex),requestedQuestionIndex>=0&&(self.firstQuestionToShow=requestedQuestionIndex),self.hideShowQuestions(self.firstQuestionToShow,self.questionsperpage)}isWindowObj(obj){return obj&&obj.document&&obj.location&&obj.alert&&obj.setInterval}}_exports.init=(versionstring,questionsperpage)=>{window.console.log("block_quizonepagepaginate::init::Started with versionstring="+versionstring+"; questionsperpage="+questionsperpage);try{M.block_quizonepagepaginate=new block_quizonepagepaginate(versionstring,questionsperpage),M.block_quizonepagepaginate.run()}catch(e){window.console.error(e)}}}));

//# sourceMappingURL=module.min.js.map
define("block_quizonepagepaginate/module",["exports"],(function(_exports){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0;
/**
   * JS for this plugin.
   *
   * @copyright   IntegrityAdvocate.com
   * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
class block_quizonepagepaginate{constructor(questionsperpage){const FXN=this.constructor.name+".constructor";if(this.shouldUseThisBlockJs()){if(isNaN(questionsperpage))throw FXN+"::Invalid value passed for param questionsperpage";this.questionsperpage=parseInt(questionsperpage),this.firstQuestionToShow=0,this.eltQuestionsSelector="#page-mod-quiz-attempt #responseform .que",this.eltQuizFinishAttemptButtonSelector="#responseform .submitbtns .mod_quiz-next-nav",this.eltBqoppButtonPrev=this.constructor.name+"-prev",this.eltBqoppButtonNext=this.constructor.name+"-next",this.arrQuestions=[]}}run(){const self=this;self.constructor.name;if(!self.shouldUseThisBlockJs())return void 0;self.getAllQuestions(),self.addNextPrevButtons();const requestedQuestionIndex=self.getAnchorQuestionIndex();requestedQuestionIndex>=0&&(self.firstQuestionToShow=requestedQuestionIndex),self.hideShowQuestions(self.firstQuestionToShow,self.questionsperpage)}shouldUseThisBlockJs(){const self=this;self.constructor.name;return null==typeof self.shouldUseThisBlockJsVal||(self.shouldUseThisBlockJsVal="page-mod-quiz-attempt"===document.body.id),self.shouldUseThisBlockJsVal}getAnchorQuestionIndex(){this.constructor.name;let questionIndex=-1;const anchor=this.getAnchor();if(!anchor)return questionIndex;const questionNrRequested=this.getAnchorQuestionNr(anchor);return questionNrRequested?(questionIndex=this.findQuestionIndexFromQuestionNr(questionNrRequested),questionIndex):questionIndex}getAnchor(){return document.URL.split("#").length>1?document.URL.split("#")[1]:null}getAnchorQuestionNr(){let anchor=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";this.constructor.name;let questionNrRequested="";if(anchor&&anchor.length>2){const regexResults=anchor.match(/(question-\d+-\d+)/);false,regexResults&&(questionNrRequested=regexResults[1])}return questionNrRequested}findQuestionIndexFromQuestionNr(){let questionNr=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";const FXN=this.constructor.name+".findQuestionIndexFromQuestionNr";let indexFound=-1;return questionNr?this.arrQuestions.length<1?(window.console.log(FXN+"::arrQuestions is empty so return not found"),indexFound):(this.arrQuestions.forEach((function(elt,index){elt.id!==questionNr||(indexFound=index)})),indexFound):(window.console.log(FXN+"::Invalid value passed for param questionNr so return not found"),indexFound)}getAllQuestions(){const self=this;self.constructor.name;self.arrQuestions=document.querySelectorAll(self.eltQuestionsSelector)}hideShowQuestions(){let first=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,length=arguments.length>1?arguments[1]:void 0;const self=M.block_quizonepagepaginate;self.constructor.name;const last=first+length;let countVisible=0;self.arrQuestions.forEach((function(elt,index){index>=first&&index<last&&countVisible<self.questionsperpage?(self.setDisplayVal(elt,"block"),countVisible++):self.setDisplayVal(elt,"none")}))}scrollToQuestion(){(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"").length<1&&document.querySelector("#responseform").scrollIntoView({behavior:"smooth"})}setDisplayVal(elt,displayVal){elt.style.display=displayVal}addNextPrevButtons(){const self=this,FXN=self.constructor.name+".addNextPrevButtons";const eltCloneSource=document.querySelector(self.eltQuizFinishAttemptButtonSelector);if(null===eltCloneSource)throw FXN+"::No button found to clone";const stringsToRetrieve=[{key:"previous",component:"core"},{key:"next",component:"core"}];require(["core/str"],(function(str){str.get_strings(stringsToRetrieve).then((function(stringsRetrieved){self.addPrevNextButton(eltCloneSource,"prev",stringsRetrieved).addEventListener("click",self.buttonClickedPrev);self.addPrevNextButton(eltCloneSource,"next",stringsRetrieved).addEventListener("click",self.buttonClickedNext)}))}))}addPrevNextButton(eltCloneSource,nextorprev,strings){const self=M.block_quizonepagepaginate;self.constructor.name;const eltClone=eltCloneSource.cloneNode(),isPrev="prev"===nextorprev,prevval=isPrev?self.eltBqoppButtonPrev:self.eltBqoppButtonNext,prevdisplay=strings[isPrev?0:1];return eltClone.setAttribute("id",prevval),eltClone.setAttribute("class",eltClone.getAttribute("class").replace("btn-primary","btn-secondary")),eltClone.setAttribute("name",prevval),eltClone.setAttribute("type",prevval),eltClone.setAttribute("value",prevdisplay),eltClone.setAttribute("data-initial-value",prevdisplay),eltCloneSource.parentNode.insertBefore(eltClone,eltCloneSource)}buttonClickedPrev(){const self=M.block_quizonepagepaginate;self.constructor.name;self.updateVisibleQuestionRange(!1),self.hideShowQuestions(self.firstQuestionToShow,self.questionsperpage),self.scrollToQuestion()}buttonClickedNext(){const self=M.block_quizonepagepaginate;self.constructor.name;self.updateVisibleQuestionRange(!0),self.hideShowQuestions(self.firstQuestionToShow,self.questionsperpage),self.scrollToQuestion()}updateVisibleQuestionRange(){let getNextSet=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];const self=M.block_quizonepagepaginate,FXN=self.constructor.name+".updateVisibleQuestionRange";const lengthToShow=self.questionsperpage,lastOfAllQs=self.arrQuestions.length;if(getNextSet){const proposedStart=self.firstQuestionToShow+lengthToShow;false,self.firstQuestionToShow=proposedStart+lengthToShow<lastOfAllQs?proposedStart:lastOfAllQs-lengthToShow}else{const proposedStart=self.firstQuestionToShow-lengthToShow;window.console.log(FXN+"::Proposed start of the next set of questions=",proposedStart),self.firstQuestionToShow=proposedStart<0?0:proposedStart}}}_exports.init=questionsperpage=>{try{M.block_quizonepagepaginate=new block_quizonepagepaginate(questionsperpage),M.block_quizonepagepaginate.run()}catch(e){window.console.error(e)}}}));

//# sourceMappingURL=module.min.js.map